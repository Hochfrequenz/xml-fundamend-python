# serializer version: 1
# name: test_read_mig[UTILTS_MIG_1.1c_Lesefassung_2023_12_12.xml]
  MessageImplementationGuide(veroeffentlichungsdatum=datetime.date(2023, 10, 24), autor='BDEW', versionsnummer='1.1c', format='UTILTS', elements=[Segment(id='BGM', name='Beginn der Nachricht', description='Dieses Segment dient dazu, Typ und Funktion anzuzeigen und die Identifikationsnummer zu übermitteln.', counter='0020', level=0, number='00002', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="BGM+Z36+MKIDI5422'", data_elements=[DataElementGroup(id='C_C002', name='Dokumenten-/Nachrichtenname', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1001', name='Dokumentenname, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel', description=None, value='Z36'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z59'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='Z60'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='Z78'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='Z79'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z80'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z81')])]), DataElementGroup(id='C_C106', name='Dokumenten-/Nachrichten-Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1004', name='Dokumentennummer', description='EDI-Nachrichtennummer vergeben vom Absender des Dokuments', status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])]), Segment(id='DTM', name='Nachrichtendatum', description='Dieses Segment wird zur Angabe des Dokumentendatums verwendet.', counter='0030', level=1, number='00003', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="DTM+137:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtendatum/-zeit', description=None, value='137')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), SegmentGroup(id='2', name='MP-ID Absender', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Absender', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00004', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MS+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtenaussteller bzw. -absender', description=None, value='MS')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])]), SegmentGroup(id='3', name='Kontaktinformationen', counter='0130', level=2, max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CTA', name='Ansprechpartner', description='Dieses Segment dient der Identifikation von Ansprechpartnern innerhalb des im vorangegangenen NAD-Segment spezifizierten Unternehmens.', counter='0140', level=2, number='00005', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CTA+IC+:Max Mustermann'", data_elements=[DataElement(id='D_3139', name='Funktion des Ansprechpartners, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Informationskontakt', description=None, value='IC')]), DataElementGroup(id='C_C056', name='Kontaktangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3413', name='Kontakt, Nummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3412', name='Name vom Ansprechpartner', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..256', format_specification='an..256', codes=[])])]), Segment(id='COM', name='Kommunikationsverbindung', description='Ein Segment zur Angabe von Kommunikationsnummer und -typ des im vorangegangenen CTA-Segments angegebenen Sachbearbeiters oder der Abteilung.', counter='0150', level=3, number='00006', max_rep_std=9, max_rep_specification=5, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="COM+00322227120:TE'", data_elements=[DataElementGroup(id='C_C076', name='Kommunikationsverbindung', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_3148', name='Nummer / Adresse', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_3155', name='Art des Kommunikationsmittels, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Elektronische Post', description=None, value='EM'), Code(name='Telefax', description=None, value='FX'), Code(name='Telefon', description=None, value='TE'), Code(name='weiteres Telefon', description=None, value='AJ'), Code(name='Handy', description=None, value='AL')])])])]), SegmentGroup(id='2', name='MP-ID Empfänger', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Empfänger', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00007', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MR+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nachrichtenempfänger', description=None, value='MR')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])])]), SegmentGroup(id='5', name='Vorgang', counter='0200', level=1, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='IDE', name='Vorgang', description='Dieses Segment dient zur datei- und nachrichtenübergreifenden eindeutigen Identifikation eines einzelnen Vorgangs. Die Nutzung der vollen Zeichenlänge ist nicht notwendig. \r\n\r\nHinweis zu DE7402: \r\nEs ist zu beachten, dass die Eindeutigkeit nachrichtenübergreifend eingehalten werden muss. Das bedeutet, eine bereits verwendete Vorgangsnummer in dem IDE+24 Segment darf auch in einer später versendeten Nachricht nicht mehr genutzt werden.', counter='0210', level=1, number='00008', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="IDE+24+VorgangsId12345'", data_elements=[DataElement(id='D_7495', name='Objekt, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktion', description=None, value='24')]), DataElementGroup(id='C_C206', name='Identifikationsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7402', name='Vorgangsnummer', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='ID der Marktlokation', description='In diesem Segment wird die ID der Marktlokation übermittelt.', counter='0220', level=2, number='00009', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+172+57685676748'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Meldepunkt', description=None, value='172')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='ID der Marktlokation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='Code der Definition', description='In diesem Segment wird der Code einer  Definition übermittelt.', counter='0220', level=2, number='00010', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+Z09+ZZ1'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Definition', description=None, value='Z09')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='Code der Definition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[])])]), Segment(id='DTM', name='Gültig ab', description='Dieses Segment wird zur Angabe verwendet, zu welchem Zeitpunkt die Berechnungsformel oder die Übersicht einer Definition ihre Gültigkeit erlangt.', counter='0280', level=2, number='00011', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+157:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeit, Beginndatum', description=None, value='157')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsbeginn der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsbeginn der ausgerollten Definition verwendet.', counter='0280', level=2, number='00012', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z34:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsbeginn', description=None, value='Z34')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsende der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsende einer ausgerollten Definition verwendet.', counter='0280', level=2, number='00013', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z35:202109091515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsende', description=None, value='Z35')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Versionsangabe', description='Dieses Segment wird zur Angabe der Version der Übersicht einer Definition oder einer ausgerollten Definition verwendet.\r\n\r\nDie Versionsangabe vergibt der Absender in seinem IT-System. Ein neue Versionsangabe wird genau dann vergeben, wenn inhaltliche Änderungen in der Übersicht einer Definition oder in der ausgerollten Definition durchgeführt wurden, diese wird gegenüber allen Empfängern verwendet.', counter='0280', level=2, number='00014', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+293:20210607151545?+00:304'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Fertigstellungsdatum/-zeit', description=None, value='293')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMSSZZZ', description=None, value='304')])])]), Segment(id='TS', name='Status der Antwort', description='DE9013 Diesem Datenelement werden Codes aus den Codelisten des Dokumentes „Entscheidungsbaum-Diagramme“ verwendet. Jeder Entscheidungsbaum gilt als Codeliste. Die relevante Codeliste wird im DE1131 angegeben. Somit sind nur die Codes in einem Anwendungsfall möglich, welche in dem zugehörigen Entscheidungsbaum aufgeführt sind. \r\n\r\nDE1131 des Segments ist genutzt und enthält die Codes der Entscheidungsbaum-Diagramme bzw. die Codes der im Dokument Entscheidungsbaum-Diagramme enthaltenen Code-Tabellen, die in der Nachricht verwendet werden.', counter='0300', level=2, number='00015', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+E01++A01:E_0218'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Antwort', description=None, value='E01')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C556', name='Statusanlaß', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9013', name='Code des Prüfschritts', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..17', format_specification='an..17', codes=[Code(name='EBD Nr. E_0218', description=None, value='E_0218')])])]), Segment(id='TS', name='Status der Berechnungsformel', description='In diesem Segment wird der Status der Berechnungsformel übermittelt.', counter='0300', level=2, number='00016', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z23+Z33'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Berechnungsformel', description=None, value='Z23')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel angefügt', description='Die Berechnungsformel zur Ermittlung der Energiemenge einer Marktlokation ist in diesem Vorgang der UTILTS enthalten', value='Z33'), Code(name='Berechnungsformel muss beim Absender angefragt werden', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Marktlokation ist komplex und kann mit der UTILTS nicht übermittelt werden', value='Z34'), Code(name='Berechnungsformel besitzt keine Rechenoperation', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Marktlokation besitzt keine Rechenoperation, da es sich um eine 1:1 Beziehung zwischen der Markt- und Messlokation handelt.', value='Z40'), Code(name='Berechnungsformel nicht erforderlich', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Marktlokation ist nicht erforderlich, da keine Messlokation der Marktlokation (pauschale Marktlokation) zugeordnet ist.', value='Z41')])])]), Segment(id='TS', name='Status der Nutzung von Definitionen', description='In diesem Segment wird vom Marktpartner angegeben, ob er Definitionen verwendet.', counter='0300', level=2, number='00017', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z36+Z45'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nutzung von Definitionen', description=None, value='Z36')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Definitionen werden verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB bzw. LF nutzt Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt Leistungskurvendefinitionen. Die Liste der Leistungskurvendefinitionen enthält somit Leistungskurven.', value='Z45'), Code(name='Definitionen werden nicht verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB nutzt keine Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit keine Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt keine Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit keine Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt keine Leistungskurven. Die Liste der Leistungskurvendefinitionen enthält somit keine Leistungskurven.', value='Z46')])])]), SegmentGroup(id='6', name='Prüfidentifikator', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='RFF', name='Prüfidentifikator', description='Dieses Segment dient zur Übermittlung des Prüfidentifikators.', counter='0350', level=2, number='00018', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+Z13:25001'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Prüfidentifikator', description=None, value='Z13')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n5', codes=[Code(name='Berechnungsformel', description=None, value='25001'), Code(name='Ablehnung Berechnungsformel', description=None, value='25002'), Code(name='Zustimmung Berechnungsformel', description=None, value='25003'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='25004'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='25005'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='25006'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='25007'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='25008'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='25009')])])])]), SegmentGroup(id='6', name='Referenz auf Reklamation', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz auf Reklamation', description='In diesem Segment wird die Dokumentenummer des Geschäftsvorfalls der Reklamation angegeben.', counter='0350', level=2, number='00019', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+AGI:FGEFW566TTDF123E'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Beantragungsnummer', description=None, value='AGI')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='6', name='Referenz-Vorgangsnummer (aus Berechnungsformel)', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz Vorgangsnummer (aus Berechnungsformel)', description='Dieses Segment dient zur Angabe der Referenz auf die Vorgangsnummer eines vorangegangenen Vorgangs. \r\n\r\nHinweis:\r\nDE1154: Referenznummer aus dem IDE-Segment eines Vorgangs zur Übermittlung einer Berechnungsformel', counter='0350', level=2, number='00020', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+TN:NNV12345'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktions-Referenznummer', description=None, value='TN')]), DataElement(id='D_1154', name='Vorgangsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='7', name='Lieferrichtung', counter='0370', level=2, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Lieferrichtung', description='Dieses Segment wird benutzt, um die Lieferrichtung der Marktlokation anzugeben.', counter='0380', level=2, number='00021', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z30++Z06'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Lieferrichtung', description=None, value='Z30')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Erzeugung', description=None, value='Z06'), Code(name='Verbrauch', description=None, value='Z07')])])])]), SegmentGroup(id='8', name='Energiemenge der Marktlokation', counter='0400', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Energiemenge der Marktlokation', description=None, counter='0410', level=2, number='00022', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z36'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Energiemenge der Marktlokation', description=None, value='Z36')])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird der Rechenschrittidentifikator angegeben, welcher in einer Berechnungsformel den letzten Rechenschritt definiert und somit das Ergebnis der Energiemenge der Marktlokation ergibt.', counter='0430', level=3, number='00023', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z23:3'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])]), SegmentGroup(id='9', name='Verwendungszweck der Werte', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Verwendungszweck der Werte', description=None, counter='0480', level=3, number='00024', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.R: 'R'>, example="CCI+Z27'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verwendungszweck der Werte', description=None, value='Z27')])]), Segment(id='CAV', name='Verwendungszweck der Werte', description='Mit Hilfe des Verwendungszwecks der Werte wird in der UTILTS beschrieben, für welchen Verwendungszweck das Ergebnis der Berechnungsformel an der Marktlokation zu nutzen ist.\r\nWerden vom NB nicht alle Verwendungszwecke in der UTILTS aufgelistet, die er zuvor in der Anmeldebestätigung gegenüber dem MSB bzw. LF übermittelt hat oder werden im Rahmen der Stammdatenänderung Verwendungszwecke übermittelt für die eine Berechnungsformel nicht gültig ist, muss der MSB bzw. ab 1.10.2020 der LF die Berechnungsformel beim NB bilateral anfragen.', counter='0490', level=4, number='00025', max_rep_std=99, max_rep_specification=4, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z84'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Netznutzungsabrechnung', description=None, value='Z84'), Code(name='Bilanzkreisabrechnung', description=None, value='Z85'), Code(name='Mehrmindermengenabrechnung', description=None, value='Z86'), Code(name='Übermittlung an das HKNR', description=None, value='Z92'), Code(name='Endkundenabrechnung', description=None, value='Z47')])])])])]), SegmentGroup(id='8', name='Bestandteil des Rechenschritts', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Bestandteil des Rechenschritts', description='In dieser Segmentgruppe wird ein Bestandteil des in DE1050 genannten Reschenschritts definiert. Alle Bestandteile, die zu einem Rechenschritt gehören, müssen den gleichen Rechenschrittidentifikator haben. \r\n\r\nHinweise zum Rechenschrittidentifikator:\r\n - Der Rechenschrittidentifkator ist ausschließlich als positive natürliche Zahl anzugeben. \r\n - Der Rechenschrittidentifikator ist pro Rechenschritt eindeutig. \r\n - Der Rechenschrittidentifikator identifiziert einen Rechenschritt im Vorgang, dementsprechend können mehrere SEQ+Z37 in einem Vorgang den identischen Rechenschrittidentifikator haben.', counter='0410', level=2, number='00026', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z37+1'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestandteil des Rechenschritts', description=None, value='Z37')]), DataElementGroup(id='C_C286', name='Information über eine Folge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1050', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..10', format_specification='n..5', codes=[])])]), Segment(id='RFF', name='Referenz auf die ID einer Messlokation', description='In diesem Segment wird die ID einer Messlokation übermittelt.', counter='0430', level=3, number='00027', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z19:DE00014545768S0000000000000003054'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Messlokation', description=None, value='Z19')]), DataElement(id='D_1154', name='ID einer Messlokation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..70', codes=[])])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird die Referenz auf einen anderen Rechenschritt durch die Angabe des Rechenschrittidentifikators übermittelt. \r\n\r\nHinweis zum Rechenschrittidentifikator:\r\nDer hier angegebene Rechenschrittidentifikator muss ein anderer sein als der im SEQ+Z37 DE1050 genannte, der die SG8 eröffnet, in der dieses RFF Referenz auf einen Rechenschritt enthalten ist.', counter='0430', level=3, number='00028', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z23:1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])]), SegmentGroup(id='9', name='Mathematischer Operator', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Mathematischer Operator', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.', counter='0480', level=3, number='00029', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z86'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Mathematischer Operator', description=None, value='Z86')])])]), Segment(id='CAV', name='Operator / Operation', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.\r\n\r\nMathematische Beschreibung des Operators Positivwert:\r\nMit Positivwert (x) ist eine reellwertige Funktion gemeint, für die gilt:\r\nPositivwert (x) = x, wenn x ≥ 0 \r\n                         = 0, sonst.\r\n\r\nAuf die Messwerte der Messlokation sind erst der Verlustfaktor des Transformators und der Verlustfaktor der Leitung, jeweils multiplikativ anzuwenden. Das Ergebnis wird anschließend in der Operation des Bestandteils des Rechenschritts verwendet. \r\n\r\nRegeln:\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z69 (Addition) und CAV+Z70 (Subtraktion) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z82 (Faktor) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z80 (Divisor) vorkommt, darf dieses CAV-Segment genau einmal vorkommen und es muss in diesem Rechenschritt auch CAV+Z81 (Dividend) genau einmal vorkommen. Auch CAV+Z81 (Dividend) darf in einem Rechenschritt nur einmal vorkommen und erfordert zwingend genau ein CAV+Z80 (Divisor) im gleichen Rechenschritt.\r\nWeitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.\r\n\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z82 (Faktor) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z69 (Addition) und kein CAV+Z70 (Subtraktion) und kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z83 (Positivwert) vorkommt, darf dieses CAV-Segment genau einmal vorkommen. Weitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.', counter='0490', level=4, number='00030', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z69'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Addition', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Addition berücksichtigt.\r\n', value='Z69'), Code(name='Subtraktion', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Subtraktion berücksichtigt.\r\n', value='Z70'), Code(name='Divisor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Divisor (Nenner des Bruchs).', value='Z80'), Code(name='Dividend', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Dividend (Zähler des Bruchs).', value='Z81'), Code(name='Faktor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des Rechenschritts wird in diesem Rechenschritt als ein Faktor einer Multiplikation berücksichtigt.', value='Z82'), Code(name='Positivwert', description='Auf das Ergebnis des referenzierten Rechenschritts ist die Funktion Positivwert anzuwenden (d. h. ist das Ergebnis des referenzierten Rechenschritts ein negativer Wert, so ergibt sich durch das Anwenden der Funktion Positivwert der Wert 0', value='Z83')])])])]), SegmentGroup(id='9', name='Energieflussrichtung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der verwendeten Energieflussrichtung der in dem Bestandteil des Rechenschritts genannten Messlokation.', counter='0480', level=3, number='00031', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z87'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Energieflussrichtung', description=None, value='Z87')])])]), Segment(id='CAV', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der benutzten Energieflussrichtung im Bestandteil des Rechenschritts. Die Energieflussrichtung gibt an, ob die gemessene Energie an der Messlokation zum Netz fließt (Erzeugung) oder vom Netz wegfließt (Verbrauch). Entsprechend dieser Aussage sind die zuvor durch die UTILMD ausgetauschten Register der Messlokation in der Berechnungsformel zu verwenden.', counter='0490', level=4, number='00032', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z71'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verbrauch', description=None, value='Z71'), Code(name='Erzeugung', description=None, value='Z72')])])])]), SegmentGroup(id='9', name='Verlustfaktor Trafo', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Trafo', description='Diese Segmentgruppe von CCI CAV dient zur Darstellung von Verlustfaktoren an der Messlokation. \r\n\r\nBei einer Messlokation, die aufgrund der vertraglichen Regelungen die Energiemenge auf der Oberspannungsseite des Transformators zu erfassen hat, jedoch die Energiemenge auf der Unterspannungsseite des Transformators erfasst, ist die Angabe des Verlustfaktors des Transformators nötig. Dies ist der Fall, wenn die Spannungsebene der Marktlokation höher ist als die der Messlokation.\r\n\r\nHinweis: \r\n„Verlustfaktor Trafo“ entspricht im NN-Vertrag dem Korrekturfaktor.', counter='0480', level=3, number='00033', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z16'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Trafo', description=None, value='Z16')])])]), Segment(id='CAV', name='Verlustfaktor Trafo', description='Dieses Segment dient zur Angabe des Verlustfaktors des Transformators. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor Trafo vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben.\r\nDer Verlustfaktor Trafo ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00034', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Trafo', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Verlustfaktor Leitung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nBei einer räumlichen Entfernung des Anschlusspunktes der Marktlokation und der für die Ermittlung der Energiemenge zuständigen Messlokation, kommt es zu nicht gemessenen Energiemengen, die aufgrund des Anschlusspunktes der Marktlokation und der Messlokation entstanden sind. Diese in den Leitungen/Kabeln verursachten Verluste werden mit dem Verlustfaktor Leitung berücksichtigt.', counter='0480', level=3, number='00035', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZB2'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Leitung', description=None, value='ZB2')])])]), Segment(id='CAV', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor der Leitung vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben. \r\nDer Verlustfaktors der Leitung ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00036', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Leitung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Aufteilungsfaktor Energiemenge', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktors der Energiemenge.\r\n\r\nIm Referentenentwurf zum Gesetz zur Änderung des Erneuerbare-Energien-Gesetzes und weiterer energiewirtschaftsrechtlicher Vorschriften zur Steigerung des Ausbaus photovoltaischer Energieerzeugung ist im § 42b EnWG die gemeinschaftliche Gebäudeversorgung mittels einer PV-Anlage geregelt:\r\n„Ein Letztverbraucher kann elektrische Energie, die durch den Einsatz einer Gebäudestromanlage erzeugt wurde, die in, an oder auf demselben Gebäude installiert ist, in dem der Letztverbraucher Mieter von Räumen, Wohnungseigentümer im Sinne des § 1 Absatz 1 des Wohnungseigentumsgesetzes oder sonst Eigentümer von Räumen ist, nutzen, wenn \r\n1. die Nutzung ohne Durchleitung durch ein Netz erfolgt,\r\n2. die Strombezugsmengen des Letztverbrauchers viertelstündlich gemessen werden und \r\n3. der Letztverbraucher einen Gebäudestromnutzungsvertrag nach Maßgabe der folgenden Absätze mit dem Betreiber der Gebäudestromanlage geschlossen hat (teilnehmender Letztverbraucher)."\r\n\r\nMit dem Aufteilungsfaktor Energiemenge kann die durch das Gesetz benötigte Verteilung der durch eine erzeugende Marktlokation erzeugte Energiemenge auf verbrauchende Marktlokationen übermittelt werden. Die erzeugte Energiemenge wird durch eine oder mehrere Messlokationen gemessen über diese die Verteilung erfolgt.', counter='0480', level=3, number='00037', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZG6'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZG6')])])]), Segment(id='CAV', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktor einer Energiemenge.', counter='0490', level=4, number='00038', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZH6:::20'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZH6')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Aufteilungsfaktor Energiemenge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])])]), SegmentGroup(id='8', name='Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Zählzeitdefinition und einer ausgerollten Zählzeitdefinition definiert.', counter='0410', level=2, number='00039', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z43'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinition', description=None, value='Z42'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z43')])]), Segment(id='DTM', name='Zählzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der Wechsel auf ein neues aktives Zählzeitregister erfolgt.', counter='0420', level=3, number='00040', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z33:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitänderungszeitpunkt', description=None, value='Z33')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), Segment(id='RFF', name='Zählendes Register', description='Angabe des Registers, welches ab dem Zählzeitänderungszeitpunkt aktiv ist.', counter='0430', level=3, number='00041', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z28:RZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des zählenden Registers', description=None, value='Z28')]), DataElement(id='D_1154', name='Code des zählenden Registers', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Zählzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt.', counter='0480', level=3, number='00042', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z39++ZZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z39')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Zählzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00043', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit einem Zählzeitänderungszeitpunkt an allen Tagen je Zählzeitregister über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition einmalig ausgerollt und übermittelt werden.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit unterschiedlichen Zählzeitänderungszeitpunkt je Zählzeitregister an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Zählzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00044', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Zählzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw.NB übermittelt die ausgerollte Zählzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])]), Segment(id='CAV', name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description='In diesem Segment wird angegeben, ob der Netzbetreiber zur Ermittlung des Leistungsmaximums bei atypsicher Netznutzung das Hochlastzeitfenster nutzt.', counter='0490', level=4, number='00045', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD4:::Z25'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description=None, value='ZD4')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Verwendung des Hochlastzeitfensters', description=None, value='Z25'), Code(name='keine Verwendung des Hochlastzeitfensters', description=None, value='Z26')])])]), Segment(id='CAV', name='Bestellbarkeit der Zählzeitdefinition', description='In diesem Segment wird die Bestellbarkeit der Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00046', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD7:::Z27'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestellbarkeit der Zählzeitdefinition', description=None, value='ZD7')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Zählzeitdefinition ist bestellbar', description=None, value='Z27'), Code(name='Zählzeitdefinition ist nicht bestellbar', description=None, value='Z28')])])]), Segment(id='CAV', name='Zählzeitdefinitionstyp', description='In diesem Segment wird der Zählzeitdefinitionstyp übermittelt.', counter='0490', level=4, number='00047', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD3:::Z32:Beschreibungstext'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinitionstyp', description=None, value='ZD3')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Wärmepumpe', description=None, value='Z29'), Code(name='Nachtspeicherheizung', description=None, value='Z30'), Code(name='Schwachlastzeitfenster', description=None, value='Z31'), Code(name='sonstiger Zählzeitdefinitionstyp', description=None, value='Z32'), Code(name='Hochlastzeitfenster', description=None, value='Z35')]), DataElement(id='D_7110', name='Beschreibung Zählzeitdefinitionstyp', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..35', format_specification='an..35', codes=[])])])])]), SegmentGroup(id='8', name='Register der Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Register der Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Register einer Zählzeitdefinition übermittelt.', counter='0410', level=2, number='00048', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z41'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Register der Zählzeitdefinition', description=None, value='Z41')])]), Segment(id='RFF', name='Referenz auf eine Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt um das Register einer Zählzeitdefinition zuzuordnen.', counter='0430', level=3, number='00049', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z27:ZZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z27')]), DataElement(id='D_1154', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Register', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Code des Zählzeitregister', description='In diesem Segment wird der Code des Zählzeitregisters übermittelt.', counter='0480', level=3, number='00050', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z38++RZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des Zählzeitregisters', description=None, value='Z38')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code des Zählzeitregisters', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])])]), SegmentGroup(id='9', name='Schwachlastfähigkeit', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schwachlastfähigkeit', description='Dieses Segment dient zur Identifizierung und Beschreibung der Schwachlastfähigkeit eines Registers.\r\nHier wird übermittelt ob eine Schwachlast-Fähigkeit für die Konzessionsabgabe benötigt wird.', counter='0480', level=3, number='00051', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z10++Z59'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Schwachlastfähigkeit', description=None, value='Z10')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Nicht-Schwachlast fähig', description=None, value='Z59'), Code(name='Schwachlast fähig', description=None, value='Z60')])])])])]), SegmentGroup(id='8', name='Schaltzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Schaltzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Schaltdefinition und einer ausgerollten Schaltzeitdefinitionen definiert.', counter='0410', level=2, number='00052', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z69'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitdefinition', description=None, value='Z69'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z73')])]), Segment(id='DTM', name='Schaltzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem eine Schalthandlung stattfindet.', counter='0420', level=3, number='00053', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z44:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitänderungszeitpunkt', description=None, value='Z44')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Schaltzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Schaltzeitdefinition', description='In diesem Segment wird der Code der Schaltzeitdefinition übermittelt.', counter='0480', level=3, number='00054', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z52++EDF'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Schaltzeitdefinition', description=None, value='Z52')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Schaltzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Schaltzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00055', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit identischen Schaltzeitänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinitiont wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit unterschiedlichen Schaltzeitänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Schaltzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Schaltzeitdefinition übermittelt.', counter='0490', level=4, number='00056', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='9', name='Schalthandlung an der Lokation', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schalthandlung an der Lokation', description='Angabe der Schalthandlung zu einem Schaltzeitänderungszeitpunkt.', counter='0480', level=3, number='00057', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z58++ZF4'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schalthandlung', description=None, value='Z58')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistung an der Lokation an', description=None, value='ZF4'), Code(name='Leistung an der Lokation aus', description=None, value='ZF5')])])])])]), SegmentGroup(id='8', name='Leistungskurvendefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Leistungskurvendefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Leistungskurvendefinition und einer ausgerollten Leistungskurvendefinition definiert.', counter='0410', level=2, number='00058', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z70'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvendefinition', description=None, value='Z70'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z74')])]), Segment(id='DTM', name='Leistungskurvenänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der obere und/oder der untere Schwellwert einer Leistungskurve geändert wird.', counter='0420', level=3, number='00059', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z45:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvenänderungszeitpunkt', description=None, value='Z45')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Leistungskurvendefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Leistungskurvendefinition', description='In diesem Segment wird der Code der Leistungskurvendefinition übermittelt.', counter='0480', level=3, number='00060', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z53++ES1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Leistungskurvendefinition', description=None, value='Z53')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Leistungskurvendefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Leistungskurvendefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00061', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit identischen Leistungskurvenänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit unterschiedlichen Leistungskurvenänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Leistungskurvendefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Leistungskurvendefinition übermittelt.', counter='0490', level=4, number='00062', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='11', name='oberer Schwellwert', counter='0530', level=3, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='QTY', name='oberer Schwellwert', description='In diesem Segment wird der oberer Schwellwert der Leistungskurvendefinition angegeben.', counter='0540', level=3, number='00063', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="QTY+Z40:70.00:P1'", data_elements=[DataElementGroup(id='C_C186', name='Mengenangaben', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_6063', name='Menge, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='oberer Schwellwert', description=None, value='Z40')]), DataElement(id='D_6060', name='Mengenangabe in %', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..6', codes=[]), DataElement(id='D_6411', name='Maßeinheit, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..8', format_specification='an..2', codes=[Code(name='', description=None, value=None), Code(name='Prozent', description=None, value='P1')])])])])])])]), Segment(id='UNT', name='Nachrichten-Endesegment', description='Das UNT-Segment ist ein Muss-Segment in UN/EDIFACT. Es muss immer das letzte Segment in einer Nachricht sein.', counter='0640', level=0, number='00064', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="UNT+64+1'", data_elements=[DataElement(id='D_0074', name='Anzahl der Segmente in einer Nachricht', description='Hier wird die Gesamtzahl der Segmente einer Nachricht angegeben.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='n..6', format_specification='n..6', codes=[]), DataElement(id='D_0062', name='Nachrichten-Referenznummer', description='Die Referenznummer aus dem UNH-Segment muss hier wiederholt werden.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..14', format_specification='an..14', codes=[])])])
# ---
# name: test_read_mig[UTILTS_MIG_1.1d_Konsultationsfassung_2024_04_02.xml]
  MessageImplementationGuide(veroeffentlichungsdatum=datetime.date(2024, 4, 2), autor='BDEW', versionsnummer='1.1d', format='UTILTS', elements=[Segment(id='BGM', name='Beginn der Nachricht', description='Dieses Segment dient dazu, Typ und Funktion anzuzeigen und die Identifikationsnummer zu übermitteln.', counter='0020', level=0, number='00002', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="BGM+Z36+MKIDI5422'", data_elements=[DataElementGroup(id='C_C002', name='Dokumenten-/Nachrichtenname', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1001', name='Dokumentenname, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel', description=None, value='Z36'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z59'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='Z60'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='Z78'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='Z79'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z80'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z81')])]), DataElementGroup(id='C_C106', name='Dokumenten-/Nachrichten-Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1004', name='Dokumentennummer', description='EDI-Nachrichtennummer vergeben vom Absender des Dokuments', status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])]), Segment(id='DTM', name='Nachrichtendatum', description='Dieses Segment wird zur Angabe des Dokumentendatums verwendet.', counter='0030', level=1, number='00003', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="DTM+137:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtendatum/-zeit', description=None, value='137')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), SegmentGroup(id='2', name='MP-ID Absender', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Absender', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00004', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MS+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtenaussteller bzw. -absender', description=None, value='MS')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])]), SegmentGroup(id='3', name='Kontaktinformationen', counter='0130', level=2, max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CTA', name='Ansprechpartner', description='Dieses Segment dient der Identifikation von Ansprechpartnern innerhalb des im vorangegangenen NAD-Segment spezifizierten Unternehmens.', counter='0140', level=2, number='00005', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CTA+IC+:Max Mustermann'", data_elements=[DataElement(id='D_3139', name='Funktion des Ansprechpartners, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Informationskontakt', description=None, value='IC')]), DataElementGroup(id='C_C056', name='Kontaktangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3413', name='Kontakt, Nummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3412', name='Name vom Ansprechpartner', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..256', format_specification='an..256', codes=[])])]), Segment(id='COM', name='Kommunikationsverbindung', description='Ein Segment zur Angabe von Kommunikationsnummer und -typ des im vorangegangenen CTA-Segments angegebenen Sachbearbeiters oder der Abteilung.', counter='0150', level=3, number='00006', max_rep_std=9, max_rep_specification=5, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="COM+?+49322227120:TE'", data_elements=[DataElementGroup(id='C_C076', name='Kommunikationsverbindung', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_3148', name='Nummer / Adresse', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_3155', name='Art des Kommunikationsmittels, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Elektronische Post', description=None, value='EM'), Code(name='Telefax', description=None, value='FX'), Code(name='Telefon', description=None, value='TE'), Code(name='weiteres Telefon', description=None, value='AJ'), Code(name='Handy', description=None, value='AL')])])])]), SegmentGroup(id='2', name='MP-ID Empfänger', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Empfänger', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00007', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MR+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nachrichtenempfänger', description=None, value='MR')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])])]), SegmentGroup(id='5', name='Vorgang', counter='0200', level=1, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='IDE', name='Vorgang', description='Dieses Segment dient zur datei- und nachrichtenübergreifenden eindeutigen Identifikation eines einzelnen Vorgangs. Die Nutzung der vollen Zeichenlänge ist nicht notwendig. \r\n\r\nHinweis zu DE7402: \r\nEs ist zu beachten, dass die Eindeutigkeit nachrichtenübergreifend eingehalten werden muss. Das bedeutet, eine bereits verwendete Vorgangsnummer in dem IDE+24 Segment darf auch in einer später versendeten Nachricht nicht mehr genutzt werden.', counter='0210', level=1, number='00008', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="IDE+24+VorgangsId12345'", data_elements=[DataElement(id='D_7495', name='Objekt, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktion', description=None, value='24')]), DataElementGroup(id='C_C206', name='Identifikationsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7402', name='Vorgangsnummer', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='Meldepunkt', description='In diesem Segment wird die ID der Markt- oder Netzlokation übermittelt.', counter='0220', level=2, number='00009', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+172+57685676748'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Meldepunkt', description=None, value='172')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='Identifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='Code der Definition', description='In diesem Segment wird der Code einer  Definition übermittelt.', counter='0220', level=2, number='00010', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+Z09+ZZ1'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Definition', description=None, value='Z09')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='Code der Definition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[])])]), Segment(id='DTM', name='Gültig ab', description='Dieses Segment wird zur Angabe verwendet, zu welchem Zeitpunkt die Berechnungsformel oder die Übersicht einer Definition ihre Gültigkeit erlangt.', counter='0280', level=2, number='00011', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+157:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeit, Beginndatum', description=None, value='157')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsbeginn der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsbeginn der ausgerollten Definition verwendet.', counter='0280', level=2, number='00012', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z34:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsbeginn', description=None, value='Z34')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsende der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsende einer ausgerollten Definition verwendet.', counter='0280', level=2, number='00013', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z35:202109091515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsende', description=None, value='Z35')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Versionsangabe', description='Dieses Segment wird zur Angabe der Version der Übersicht einer Definition oder einer ausgerollten Definition verwendet.\r\n\r\nDie Versionsangabe vergibt der Absender in seinem IT-System. Ein neue Versionsangabe wird genau dann vergeben, wenn inhaltliche Änderungen in der Übersicht einer Definition oder in der ausgerollten Definition durchgeführt wurden, diese wird gegenüber allen Empfängern verwendet.', counter='0280', level=2, number='00014', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+293:20210607151545?+00:304'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Fertigstellungsdatum/-zeit', description=None, value='293')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMSSZZZ', description=None, value='304')])])]), Segment(id='TS', name='Status der Antwort', description='DE9013 Diesem Datenelement werden Codes aus den Codelisten des Dokumentes „Entscheidungsbaum-Diagramme“ verwendet. Jeder Entscheidungsbaum gilt als Codeliste. Die relevante Codeliste wird im DE1131 angegeben. Somit sind nur die Codes in einem Anwendungsfall möglich, welche in dem zugehörigen Entscheidungsbaum aufgeführt sind. \r\n\r\nDE1131 des Segments ist genutzt und enthält die Codes der Entscheidungsbaum-Diagramme bzw. die Codes der im Dokument Entscheidungsbaum-Diagramme enthaltenen Code-Tabellen, die in der Nachricht verwendet werden.', counter='0300', level=2, number='00015', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+E01++A01:E_0218'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Antwort', description=None, value='E01')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C556', name='Statusanlaß', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9013', name='Code des Prüfschritts', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..17', format_specification='an..17', codes=[Code(name='EBD Nr. E_0218', description=None, value='E_0218')])])]), Segment(id='TS', name='Status der Berechnungsformel', description='In diesem Segment wird der Status der Berechnungsformel übermittelt.', counter='0300', level=2, number='00016', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z23+Z33'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Berechnungsformel', description=None, value='Z23')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel angefügt', description='Die Berechnungsformel zur Ermittlung der Energiemenge einer Markt- oder Netzlokation ist in diesem Vorgang der UTILTS enthalten', value='Z33'), Code(name='Berechnungsformel muss beim Absender angefragt werden', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation ist komplex und kann mit der UTILTS nicht übermittelt werden', value='Z34'), Code(name='Berechnungsformel besitzt keine Rechenoperation', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation besitzt keine Rechenoperation, da es sich um eine 1:1 Beziehung zwischen der Markt- und Messlokation handelt.', value='Z40'), Code(name='Berechnungsformel nicht erforderlich', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation ist nicht erforderlich, da keine Messlokation der Marktlokation (pauschale Marktlokation) zugeordnet ist.', value='Z41')])])]), Segment(id='TS', name='Status der Nutzung von Definitionen', description='In diesem Segment wird vom Marktpartner angegeben, ob er Definitionen verwendet.', counter='0300', level=2, number='00017', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z36+Z45'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nutzung von Definitionen', description=None, value='Z36')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Definitionen werden verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB bzw. LF nutzt Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt Leistungskurvendefinitionen. Die Liste der Leistungskurvendefinitionen enthält somit Leistungskurven.', value='Z45'), Code(name='Definitionen werden nicht verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB nutzt keine Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit keine Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt keine Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit keine Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt keine Leistungskurven. Die Liste der Leistungskurvendefinitionen enthält somit keine Leistungskurven.', value='Z46')])])]), Segment(id='FTX', name='Bemerkung (Feld für allgemeine Hinweise)', description='Dieses Segment dient der Angabe von unformatierten oder codierten Textinformationen.\r\n\r\nHinweis: DE4440: Der in diesen Datenelementen enthaltene Text muss in Deutsch verfasst sein.', counter='0330', level=2, number='00018', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="FTX+ACB+++Die Ablehnung erfolgte, weil ...:die Netzlokation:keine ID:besitzt:X'", data_elements=[DataElement(id='D_4451', name='Textbezug, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zusätzliche Informationen (für allgemeine Hinweise)', description=None, value='ACB')]), DataElement(id='D_4453', name='Textfunktion, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C107', name='Text-Referenz', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_4441', name='Freier Text, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[])]), DataElementGroup(id='C_C108', name='Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4440', name='Text für allgemeine Information', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[])])]), SegmentGroup(id='6', name='Prüfidentifikator', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='RFF', name='Prüfidentifikator', description='Dieses Segment dient zur Übermittlung des Prüfidentifikators.', counter='0350', level=2, number='00019', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+Z13:25001'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Prüfidentifikator', description=None, value='Z13')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n5', codes=[Code(name='Berechnungsformel', description=None, value='25001'), Code(name='Ablehnung Berechnungsformel', description=None, value='25002'), Code(name='Zustimmung Berechnungsformel', description=None, value='25003'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='25004'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='25005'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='25006'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='25007'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='25008'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='25009')])])])]), SegmentGroup(id='6', name='Referenz auf Reklamation', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz auf Reklamation', description='In diesem Segment wird die Dokumentenummer des Geschäftsvorfalls der Reklamation angegeben.', counter='0350', level=2, number='00020', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+AGI:FGEFW566TTDF123E'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Beantragungsnummer', description=None, value='AGI')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='6', name='Referenz-Vorgangsnummer (aus Berechnungsformel)', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz Vorgangsnummer (aus Berechnungsformel)', description='Dieses Segment dient zur Angabe der Referenz auf die Vorgangsnummer eines vorangegangenen Vorgangs. \r\n\r\nHinweis:\r\nDE1154: Referenznummer aus dem IDE-Segment eines Vorgangs zur Übermittlung einer Berechnungsformel', counter='0350', level=2, number='00021', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+TN:NNV12345'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktions-Referenznummer', description=None, value='TN')]), DataElement(id='D_1154', name='Vorgangsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='7', name='Lieferrichtung', counter='0370', level=2, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Lieferrichtung', description='Dieses Segment wird benutzt, um die Lieferrichtung der Marktlokation anzugeben.', counter='0380', level=2, number='00022', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z30++Z06'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Lieferrichtung', description=None, value='Z30')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Erzeugung', description=None, value='Z06'), Code(name='Verbrauch', description=None, value='Z07')])])])]), SegmentGroup(id='8', name='Energiemenge der Markt- bzw. Netzlokation', counter='0400', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Energiemenge der Markt- bzw. Netzlokation', description=None, counter='0410', level=2, number='00023', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z36'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Energiemenge der Markt- bzw. Netzlokation', description=None, value='Z36')])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird der Rechenschrittidentifikator angegeben, welcher in einer Berechnungsformel den letzten Rechenschritt definiert und somit das Ergebnis der Energiemenge der Markt- bzw. Netzlokation ergibt.', counter='0430', level=3, number='00024', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z23:3'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])])]), SegmentGroup(id='8', name='Bestandteil des Rechenschritts', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Bestandteil des Rechenschritts', description='In dieser Segmentgruppe wird ein Bestandteil des in DE1050 genannten Reschenschritts definiert. Alle Bestandteile, die zu einem Rechenschritt gehören, müssen den gleichen Rechenschrittidentifikator haben. \r\n\r\nHinweise zum Rechenschrittidentifikator:\r\n - Der Rechenschrittidentifkator ist ausschließlich als positive natürliche Zahl anzugeben. \r\n - Der Rechenschrittidentifikator ist pro Rechenschritt eindeutig. \r\n - Der Rechenschrittidentifikator identifiziert einen Rechenschritt im Vorgang, dementsprechend können mehrere SEQ+Z37 in einem Vorgang den identischen Rechenschrittidentifikator haben.', counter='0410', level=2, number='00025', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z37+1'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestandteil des Rechenschritts', description=None, value='Z37')]), DataElementGroup(id='C_C286', name='Information über eine Folge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1050', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..10', format_specification='n..5', codes=[])])]), Segment(id='RFF', name='Referenz auf die ID einer Messlokation', description='In diesem Segment wird die ID einer Messlokation übermittelt.', counter='0430', level=3, number='00026', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z19:DE00014545768S0000000000000003054'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Messlokation', description=None, value='Z19')]), DataElement(id='D_1154', name='ID einer Messlokation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..70', codes=[])])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird die Referenz auf einen anderen Rechenschritt durch die Angabe des Rechenschrittidentifikators übermittelt. \r\n\r\nHinweis zum Rechenschrittidentifikator:\r\nDer hier angegebene Rechenschrittidentifikator muss ein anderer sein als der im SEQ+Z37 DE1050 genannte, der die SG8 eröffnet, in der dieses RFF Referenz auf einen Rechenschritt enthalten ist.', counter='0430', level=3, number='00027', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z23:1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])]), SegmentGroup(id='9', name='Mathematischer Operator', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Mathematischer Operator', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.', counter='0480', level=3, number='00028', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z86'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Mathematischer Operator', description=None, value='Z86')])])]), Segment(id='CAV', name='Operator / Operation', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.\r\n\r\nMathematische Beschreibung des Operators Positivwert:\r\nMit Positivwert (x) ist eine reellwertige Funktion gemeint, für die gilt:\r\nPositivwert (x) = x, wenn x ≥ 0 \r\n                         = 0, sonst.\r\n\r\nAuf die Messwerte der Messlokation sind erst der Verlustfaktor des Transformators und der Verlustfaktor der Leitung, jeweils multiplikativ anzuwenden. Das Ergebnis wird anschließend in der Operation des Bestandteils des Rechenschritts verwendet. \r\n\r\nRegeln:\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z69 (Addition) und CAV+Z70 (Subtraktion) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z82 (Faktor) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z80 (Divisor) vorkommt, darf dieses CAV-Segment genau einmal vorkommen und es muss in diesem Rechenschritt auch CAV+Z81 (Dividend) genau einmal vorkommen. Auch CAV+Z81 (Dividend) darf in einem Rechenschritt nur einmal vorkommen und erfordert zwingend genau ein CAV+Z80 (Divisor) im gleichen Rechenschritt.\r\nWeitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.\r\n\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z82 (Faktor) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z69 (Addition) und kein CAV+Z70 (Subtraktion) und kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z83 (Positivwert) vorkommt, darf dieses CAV-Segment genau einmal vorkommen. Weitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.', counter='0490', level=4, number='00029', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z69'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Addition', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Addition berücksichtigt.\r\n', value='Z69'), Code(name='Subtraktion', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Subtraktion berücksichtigt.', value='Z70'), Code(name='Divisor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Divisor (Nenner des Bruchs).', value='Z80'), Code(name='Dividend', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Dividend (Zähler des Bruchs).', value='Z81'), Code(name='Faktor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des Rechenschritts wird in diesem Rechenschritt als ein Faktor einer Multiplikation berücksichtigt.', value='Z82'), Code(name='Positivwert', description='Auf das Ergebnis des referenzierten Rechenschritts ist die Funktion Positivwert anzuwenden (d. h. ist das Ergebnis des referenzierten Rechenschritts ein negativer Wert, so ergibt sich durch das Anwenden der Funktion Positivwert der Wert 0', value='Z83')])])])]), SegmentGroup(id='9', name='Energieflussrichtung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der verwendeten Energieflussrichtung der in dem Bestandteil des Rechenschritts genannten Messlokation.', counter='0480', level=3, number='00030', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z87'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Energieflussrichtung', description=None, value='Z87')])])]), Segment(id='CAV', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der benutzten Energieflussrichtung im Bestandteil des Rechenschritts. Die Energieflussrichtung gibt an, ob die gemessene Energie an der Messlokation zum Netz fließt (Erzeugung) oder vom Netz wegfließt (Verbrauch). Entsprechend dieser Aussage sind die zuvor durch die UTILMD ausgetauschten Register der Messlokation in der Berechnungsformel zu verwenden.', counter='0490', level=4, number='00031', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z71'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verbrauch', description=None, value='Z71'), Code(name='Erzeugung', description=None, value='Z72')])])])]), SegmentGroup(id='9', name='Verlustfaktor Trafo', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Trafo', description='Diese Segmentgruppe von CCI CAV dient zur Darstellung von Verlustfaktoren an der Messlokation. \r\n\r\nBei einer Messlokation, die aufgrund der vertraglichen Regelungen die Energiemenge auf der Oberspannungsseite des Transformators zu erfassen hat, jedoch die Energiemenge auf der Unterspannungsseite des Transformators erfasst, ist die Angabe des Verlustfaktors des Transformators nötig. Dies ist der Fall, wenn die Spannungsebene der Marktlokation höher ist als die der Messlokation.\r\n\r\nHinweis: \r\n„Verlustfaktor Trafo“ entspricht im NN-Vertrag dem Korrekturfaktor.', counter='0480', level=3, number='00032', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z16'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Trafo', description=None, value='Z16')])])]), Segment(id='CAV', name='Verlustfaktor Trafo', description='Dieses Segment dient zur Angabe des Verlustfaktors des Transformators. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor Trafo vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben.\r\nDer Verlustfaktor Trafo ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00033', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Trafo', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Verlustfaktor Leitung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nBei einer räumlichen Entfernung des Anschlusspunktes der Marktlokation und der für die Ermittlung der Energiemenge zuständigen Messlokation, kommt es zu nicht gemessenen Energiemengen, die aufgrund des Anschlusspunktes der Marktlokation und der Messlokation entstanden sind. Diese in den Leitungen/Kabeln verursachten Verluste werden mit dem Verlustfaktor Leitung berücksichtigt.', counter='0480', level=3, number='00034', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZB2'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Leitung', description=None, value='ZB2')])])]), Segment(id='CAV', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor der Leitung vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben. \r\nDer Verlustfaktors der Leitung ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00035', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Leitung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Aufteilungsfaktor Energiemenge', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktors der Energiemenge.\r\n\r\nIm Referentenentwurf zum Gesetz zur Änderung des Erneuerbare-Energien-Gesetzes und weiterer energiewirtschaftsrechtlicher Vorschriften zur Steigerung des Ausbaus photovoltaischer Energieerzeugung ist im § 42b EnWG die gemeinschaftliche Gebäudeversorgung mittels einer PV-Anlage geregelt:\r\n„Ein Letztverbraucher kann elektrische Energie, die durch den Einsatz einer Gebäudestromanlage erzeugt wurde, die in, an oder auf demselben Gebäude installiert ist, in dem der Letztverbraucher Mieter von Räumen, Wohnungseigentümer im Sinne des § 1 Absatz 1 des Wohnungseigentumsgesetzes oder sonst Eigentümer von Räumen ist, nutzen, wenn \r\n1. die Nutzung ohne Durchleitung durch ein Netz erfolgt,\r\n2. die Strombezugsmengen des Letztverbrauchers viertelstündlich gemessen werden und \r\n3. der Letztverbraucher einen Gebäudestromnutzungsvertrag nach Maßgabe der folgenden Absätze mit dem Betreiber der Gebäudestromanlage geschlossen hat (teilnehmender Letztverbraucher)."\r\n\r\nMit dem Aufteilungsfaktor Energiemenge kann die durch das Gesetz benötigte Verteilung der durch eine erzeugende Marktlokation erzeugte Energiemenge auf verbrauchende Marktlokationen übermittelt werden. Die erzeugte Energiemenge wird durch eine oder mehrere Messlokationen gemessen über diese die Verteilung erfolgt.', counter='0480', level=3, number='00036', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZG6'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZG6')])])]), Segment(id='CAV', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktor einer Energiemenge.', counter='0490', level=4, number='00037', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZH6:::0.2'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZH6')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Aufteilungsfaktor Energiemenge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])])]), SegmentGroup(id='8', name='Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Zählzeitdefinition und einer ausgerollten Zählzeitdefinition definiert.', counter='0410', level=2, number='00038', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z43'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinition', description=None, value='Z42'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z43')])]), Segment(id='DTM', name='Zählzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der Wechsel auf ein neues aktives Zählzeitregister erfolgt.', counter='0420', level=3, number='00039', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z33:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitänderungszeitpunkt', description=None, value='Z33')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), Segment(id='RFF', name='Zählendes Register', description='Angabe des Registers, welches ab dem Zählzeitänderungszeitpunkt aktiv ist.', counter='0430', level=3, number='00040', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z28:RZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des zählenden Registers', description=None, value='Z28')]), DataElement(id='D_1154', name='Code des zählenden Registers', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Zählzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt.', counter='0480', level=3, number='00041', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z39++ZZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z39')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Zählzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00042', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit einem Zählzeitänderungszeitpunkt an allen Tagen je Zählzeitregister über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition einmalig ausgerollt und übermittelt werden.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit unterschiedlichen Zählzeitänderungszeitpunkt je Zählzeitregister an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Zählzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00043', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Zählzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw.NB übermittelt die ausgerollte Zählzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])]), Segment(id='CAV', name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description='In diesem Segment wird angegeben, ob der Netzbetreiber zur Ermittlung des Leistungsmaximums bei atypsicher Netznutzung das Hochlastzeitfenster nutzt.', counter='0490', level=4, number='00044', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD4:::Z25'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description=None, value='ZD4')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Verwendung des Hochlastzeitfensters', description=None, value='Z25'), Code(name='keine Verwendung des Hochlastzeitfensters', description=None, value='Z26')])])]), Segment(id='CAV', name='Bestellbarkeit der Zählzeitdefinition', description='In diesem Segment wird die Bestellbarkeit der Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00045', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD7:::Z27'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestellbarkeit der Zählzeitdefinition', description=None, value='ZD7')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Zählzeitdefinition ist bestellbar', description=None, value='Z27'), Code(name='Zählzeitdefinition ist nicht bestellbar', description=None, value='Z28')])])]), Segment(id='CAV', name='Zählzeitdefinitionstyp', description='In diesem Segment wird der Zählzeitdefinitionstyp übermittelt.', counter='0490', level=4, number='00046', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD3:::Z32:Beschreibungstext'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinitionstyp', description=None, value='ZD3')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Wärmepumpe', description=None, value='Z29'), Code(name='Nachtspeicherheizung', description=None, value='Z30'), Code(name='Schwachlastzeitfenster', description=None, value='Z31'), Code(name='sonstiger Zählzeitdefinitionstyp', description=None, value='Z32'), Code(name='Hochlastzeitfenster', description=None, value='Z35')]), DataElement(id='D_7110', name='Beschreibung Zählzeitdefinitionstyp', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..35', format_specification='an..35', codes=[])])])])]), SegmentGroup(id='8', name='Register der Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Register der Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Register einer Zählzeitdefinition übermittelt.', counter='0410', level=2, number='00047', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z41'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Register der Zählzeitdefinition', description=None, value='Z41')])]), Segment(id='RFF', name='Referenz auf eine Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt um das Register einer Zählzeitdefinition zuzuordnen.', counter='0430', level=3, number='00048', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z27:ZZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z27')]), DataElement(id='D_1154', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Register', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Code des Zählzeitregister', description='In diesem Segment wird der Code des Zählzeitregisters übermittelt.', counter='0480', level=3, number='00049', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z38++RZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des Zählzeitregisters', description=None, value='Z38')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code des Zählzeitregisters', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])])]), SegmentGroup(id='9', name='Schwachlastfähigkeit', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schwachlastfähigkeit', description='Dieses Segment dient zur Identifizierung und Beschreibung der Schwachlastfähigkeit eines Registers.\r\nHier wird übermittelt ob eine Schwachlast-Fähigkeit für die Konzessionsabgabe benötigt wird.', counter='0480', level=3, number='00050', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z10++Z59'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Schwachlastfähigkeit', description=None, value='Z10')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Nicht-Schwachlast fähig', description=None, value='Z59'), Code(name='Schwachlast fähig', description=None, value='Z60')])])])])]), SegmentGroup(id='8', name='Schaltzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Schaltzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Schaltdefinition und einer ausgerollten Schaltzeitdefinitionen definiert.', counter='0410', level=2, number='00051', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z69'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitdefinition', description=None, value='Z69'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z73')])]), Segment(id='DTM', name='Schaltzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem eine Schalthandlung stattfindet.', counter='0420', level=3, number='00052', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z44:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitänderungszeitpunkt', description=None, value='Z44')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Schaltzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Schaltzeitdefinition', description='In diesem Segment wird der Code der Schaltzeitdefinition übermittelt.', counter='0480', level=3, number='00053', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z52++EDF'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Schaltzeitdefinition', description=None, value='Z52')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Schaltzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Schaltzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00054', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit identischen Schaltzeitänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinitiont wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit unterschiedlichen Schaltzeitänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Schaltzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Schaltzeitdefinition übermittelt.', counter='0490', level=4, number='00055', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='9', name='Schalthandlung an der Lokation', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schalthandlung an der Lokation', description='Angabe der Schalthandlung zu einem Schaltzeitänderungszeitpunkt.', counter='0480', level=3, number='00056', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z58++ZF4'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schalthandlung', description=None, value='Z58')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistung an der Lokation an', description=None, value='ZF4'), Code(name='Leistung an der Lokation aus', description=None, value='ZF5')])])])])]), SegmentGroup(id='8', name='Leistungskurvendefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Leistungskurvendefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Leistungskurvendefinition und einer ausgerollten Leistungskurvendefinition definiert.', counter='0410', level=2, number='00057', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z70'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvendefinition', description=None, value='Z70'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z74')])]), Segment(id='DTM', name='Leistungskurvenänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der obere und/oder der untere Schwellwert einer Leistungskurve geändert wird.', counter='0420', level=3, number='00058', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z45:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvenänderungszeitpunkt', description=None, value='Z45')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Leistungskurvendefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Leistungskurvendefinition', description='In diesem Segment wird der Code der Leistungskurvendefinition übermittelt.', counter='0480', level=3, number='00059', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z53++ES1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Leistungskurvendefinition', description=None, value='Z53')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Leistungskurvendefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Leistungskurvendefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00060', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit identischen Leistungskurvenänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit unterschiedlichen Leistungskurvenänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Leistungskurvendefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Leistungskurvendefinition übermittelt.', counter='0490', level=4, number='00061', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='11', name='oberer Schwellwert', counter='0530', level=3, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='QTY', name='oberer Schwellwert', description='In diesem Segment wird der oberer Schwellwert der Leistungskurvendefinition angegeben.', counter='0540', level=3, number='00062', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="QTY+Z40:70.00:P1'", data_elements=[DataElementGroup(id='C_C186', name='Mengenangaben', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_6063', name='Menge, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='oberer Schwellwert', description=None, value='Z40')]), DataElement(id='D_6060', name='Mengenangabe in %', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='n..6', codes=[]), DataElement(id='D_6411', name='Maßeinheit, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..8', format_specification='an..2', codes=[Code(name='', description=None, value=None), Code(name='Prozent', description=None, value='P1')])])])])])])]), Segment(id='UNT', name='Nachrichten-Endesegment', description='Das UNT-Segment ist ein Muss-Segment in UN/EDIFACT. Es muss immer das letzte Segment in einer Nachricht sein.', counter='0640', level=0, number='00063', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="UNT+63+1'", data_elements=[DataElement(id='D_0074', name='Anzahl der Segmente in einer Nachricht', description='Hier wird die Gesamtzahl der Segmente einer Nachricht angegeben.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='n..6', format_specification='n..6', codes=[]), DataElement(id='D_0062', name='Nachrichten-Referenznummer', description='Die Referenznummer aus dem UNH-Segment muss hier wiederholt werden.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..14', format_specification='an..14', codes=[])])])
# ---
# name: test_read_mig[UTILTS_MIG_1.1d_Konsultationsfassung_2024_04_02_with_Uebertragungsdatei.xml]
  MessageImplementationGuide(veroeffentlichungsdatum=datetime.date(2024, 4, 2), autor='BDEW', versionsnummer='1.1d', format='UTILTS', elements=[Segment(id='BGM', name='Beginn der Nachricht', description='Dieses Segment dient dazu, Typ und Funktion anzuzeigen und die Identifikationsnummer zu übermitteln.', counter='0020', level=0, number='00002', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="BGM+Z36+MKIDI5422'", data_elements=[DataElementGroup(id='C_C002', name='Dokumenten-/Nachrichtenname', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1001', name='Dokumentenname, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel', description=None, value='Z36'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z59'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='Z60'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='Z78'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='Z79'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z80'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z81')])]), DataElementGroup(id='C_C106', name='Dokumenten-/Nachrichten-Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1004', name='Dokumentennummer', description='EDI-Nachrichtennummer vergeben vom Absender des Dokuments', status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])]), Segment(id='DTM', name='Nachrichtendatum', description='Dieses Segment wird zur Angabe des Dokumentendatums verwendet.', counter='0030', level=1, number='00003', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="DTM+137:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtendatum/-zeit', description=None, value='137')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), SegmentGroup(id='2', name='MP-ID Absender', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Absender', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00004', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MS+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Dokumenten-/Nachrichtenaussteller bzw. -absender', description=None, value='MS')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])]), SegmentGroup(id='3', name='Kontaktinformationen', counter='0130', level=2, max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CTA', name='Ansprechpartner', description='Dieses Segment dient der Identifikation von Ansprechpartnern innerhalb des im vorangegangenen NAD-Segment spezifizierten Unternehmens.', counter='0140', level=2, number='00005', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CTA+IC+:Max Mustermann'", data_elements=[DataElement(id='D_3139', name='Funktion des Ansprechpartners, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Informationskontakt', description=None, value='IC')]), DataElementGroup(id='C_C056', name='Kontaktangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3413', name='Kontakt, Nummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3412', name='Name vom Ansprechpartner', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..256', format_specification='an..256', codes=[])])]), Segment(id='COM', name='Kommunikationsverbindung', description='Ein Segment zur Angabe von Kommunikationsnummer und -typ des im vorangegangenen CTA-Segments angegebenen Sachbearbeiters oder der Abteilung.', counter='0150', level=3, number='00006', max_rep_std=9, max_rep_specification=5, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="COM+?+49322227120:TE'", data_elements=[DataElementGroup(id='C_C076', name='Kommunikationsverbindung', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_3148', name='Nummer / Adresse', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_3155', name='Art des Kommunikationsmittels, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Elektronische Post', description=None, value='EM'), Code(name='Telefax', description=None, value='FX'), Code(name='Telefon', description=None, value='TE'), Code(name='weiteres Telefon', description=None, value='AJ'), Code(name='Handy', description=None, value='AL')])])])]), SegmentGroup(id='2', name='MP-ID Empfänger', counter='0090', level=1, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='NAD', name='MP-ID Empfänger', description='DE3039: Zur Identifikation der Marktpartner wird die MP-ID angegeben.', counter='0100', level=1, number='00007', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="NAD+MR+9900259000002::293'", data_elements=[DataElement(id='D_3035', name='Beteiligter, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nachrichtenempfänger', description=None, value='MR')]), DataElementGroup(id='C_C082', name='Identifikation des Beteiligten', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3039', name='MP-ID', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='GS1', description=None, value='9'), Code(name='DE, BDEW (Bundesverband der Energie- und Wasserwirtschaft e.V.)', description=None, value='293')])])])]), SegmentGroup(id='5', name='Vorgang', counter='0200', level=1, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='IDE', name='Vorgang', description='Dieses Segment dient zur datei- und nachrichtenübergreifenden eindeutigen Identifikation eines einzelnen Vorgangs. Die Nutzung der vollen Zeichenlänge ist nicht notwendig. \r\n\r\nHinweis zu DE7402: \r\nEs ist zu beachten, dass die Eindeutigkeit nachrichtenübergreifend eingehalten werden muss. Das bedeutet, eine bereits verwendete Vorgangsnummer in dem IDE+24 Segment darf auch in einer später versendeten Nachricht nicht mehr genutzt werden.', counter='0210', level=1, number='00008', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="IDE+24+VorgangsId12345'", data_elements=[DataElement(id='D_7495', name='Objekt, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktion', description=None, value='24')]), DataElementGroup(id='C_C206', name='Identifikationsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7402', name='Vorgangsnummer', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='Meldepunkt', description='In diesem Segment wird die ID der Markt- oder Netzlokation übermittelt.', counter='0220', level=2, number='00009', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+172+57685676748'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Meldepunkt', description=None, value='172')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='Identifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[])])]), Segment(id='LOC', name='Code der Definition', description='In diesem Segment wird der Code einer  Definition übermittelt.', counter='0220', level=2, number='00010', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="LOC+Z09+ZZ1'", data_elements=[DataElement(id='D_3227', name='Ortsangabe, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Definition', description=None, value='Z09')]), DataElementGroup(id='C_C517', name='Ortsangabe', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_3225', name='Code der Definition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[])])]), Segment(id='DTM', name='Gültig ab', description='Dieses Segment wird zur Angabe verwendet, zu welchem Zeitpunkt die Berechnungsformel oder die Übersicht einer Definition ihre Gültigkeit erlangt.', counter='0280', level=2, number='00011', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+157:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeit, Beginndatum', description=None, value='157')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsbeginn der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsbeginn der ausgerollten Definition verwendet.', counter='0280', level=2, number='00012', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z34:202106071515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsbeginn', description=None, value='Z34')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Gültigkeitsende der ausgerollten Definition', description='Dieses Segment wird zur Angabe des Gültigkeitsende einer ausgerollten Definition verwendet.', counter='0280', level=2, number='00013', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z35:202109091515?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Gültigkeitsende', description=None, value='Z35')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303')])])]), Segment(id='DTM', name='Versionsangabe', description='Dieses Segment wird zur Angabe der Version der Übersicht einer Definition oder einer ausgerollten Definition verwendet.\r\n\r\nDie Versionsangabe vergibt der Absender in seinem IT-System. Ein neue Versionsangabe wird genau dann vergeben, wenn inhaltliche Änderungen in der Übersicht einer Definition oder in der ausgerollten Definition durchgeführt wurden, diese wird gegenüber allen Empfängern verwendet.', counter='0280', level=2, number='00014', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+293:20210607151545?+00:304'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Fertigstellungsdatum/-zeit', description=None, value='293')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMSSZZZ', description=None, value='304')])])]), Segment(id='TS', name='Status der Antwort', description='DE9013 Diesem Datenelement werden Codes aus den Codelisten des Dokumentes „Entscheidungsbaum-Diagramme“ verwendet. Jeder Entscheidungsbaum gilt als Codeliste. Die relevante Codeliste wird im DE1131 angegeben. Somit sind nur die Codes in einem Anwendungsfall möglich, welche in dem zugehörigen Entscheidungsbaum aufgeführt sind. \r\n\r\nDE1131 des Segments ist genutzt und enthält die Codes der Entscheidungsbaum-Diagramme bzw. die Codes der im Dokument Entscheidungsbaum-Diagramme enthaltenen Code-Tabellen, die in der Nachricht verwendet werden.', counter='0300', level=2, number='00015', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+E01++A01:E_0218'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Antwort', description=None, value='E01')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C556', name='Statusanlaß', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9013', name='Code des Prüfschritts', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..17', format_specification='an..17', codes=[Code(name='EBD Nr. E_0218', description=None, value='E_0218')])])]), Segment(id='TS', name='Status der Berechnungsformel', description='In diesem Segment wird der Status der Berechnungsformel übermittelt.', counter='0300', level=2, number='00016', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z23+Z33'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Status der Berechnungsformel', description=None, value='Z23')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Berechnungsformel angefügt', description='Die Berechnungsformel zur Ermittlung der Energiemenge einer Markt- oder Netzlokation ist in diesem Vorgang der UTILTS enthalten', value='Z33'), Code(name='Berechnungsformel muss beim Absender angefragt werden', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation ist komplex und kann mit der UTILTS nicht übermittelt werden', value='Z34'), Code(name='Berechnungsformel besitzt keine Rechenoperation', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation besitzt keine Rechenoperation, da es sich um eine 1:1 Beziehung zwischen der Markt- und Messlokation handelt.', value='Z40'), Code(name='Berechnungsformel nicht erforderlich', description='Die Berechnungsformel zur Ermittlung der Energiemenge der Markt- oder Netzlokation ist nicht erforderlich, da keine Messlokation der Marktlokation (pauschale Marktlokation) zugeordnet ist.', value='Z41')])])]), Segment(id='TS', name='Status der Nutzung von Definitionen', description='In diesem Segment wird vom Marktpartner angegeben, ob er Definitionen verwendet.', counter='0300', level=2, number='00017', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="STS+Z36+Z45'", data_elements=[DataElementGroup(id='C_C601', name='Statuskategorie', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_9015', name='Statuskategorie, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Nutzung von Definitionen', description=None, value='Z36')])]), DataElementGroup(id='C_C555', name='Status', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4405', name='Status, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Definitionen werden verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB bzw. LF nutzt Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt Leistungskurvendefinitionen. Die Liste der Leistungskurvendefinitionen enthält somit Leistungskurven.', value='Z45'), Code(name='Definitionen werden nicht verwendet', description='Bei Zählzeitdefinitionen:\r\nDer NB nutzt keine Zählzeitdefinitionen für die Tarifierung von Werten. Die Liste der Zählzeitdefinitionen enthält somit keine Zählzeitdefinitionen.\r\n\r\nBei Schaltzeitdefinitionen:\r\nDer NB bzw. LF nutzt keine Schaltzeitdefinitionen. Die Liste der Schaltzeitdefinitionen enthält somit keine Schaltzeitdefinitionen.\r\n\r\nBei Leistungskurvendefinitionen:\r\nDer NB bzw. LF nutzt keine Leistungskurven. Die Liste der Leistungskurvendefinitionen enthält somit keine Leistungskurven.', value='Z46')])])]), Segment(id='FTX', name='Bemerkung (Feld für allgemeine Hinweise)', description='Dieses Segment dient der Angabe von unformatierten oder codierten Textinformationen.\r\n\r\nHinweis: DE4440: Der in diesen Datenelementen enthaltene Text muss in Deutsch verfasst sein.', counter='0330', level=2, number='00018', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="FTX+ACB+++Die Ablehnung erfolgte, weil ...:die Netzlokation:keine ID:besitzt:X'", data_elements=[DataElement(id='D_4451', name='Textbezug, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zusätzliche Informationen (für allgemeine Hinweise)', description=None, value='ACB')]), DataElement(id='D_4453', name='Textfunktion, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C107', name='Text-Referenz', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_4441', name='Freier Text, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[])]), DataElementGroup(id='C_C108', name='Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_4440', name='Text für allgemeine Information', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[]), DataElement(id='D_4440', name='Freier Text', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..512', format_specification='an..512', codes=[])])]), SegmentGroup(id='6', name='Prüfidentifikator', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='RFF', name='Prüfidentifikator', description='Dieses Segment dient zur Übermittlung des Prüfidentifikators.', counter='0350', level=2, number='00019', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+Z13:25001'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Prüfidentifikator', description=None, value='Z13')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n5', codes=[Code(name='Berechnungsformel', description=None, value='25001'), Code(name='Ablehnung Berechnungsformel', description=None, value='25002'), Code(name='Zustimmung Berechnungsformel', description=None, value='25003'), Code(name='Übersicht Zählzeitdefinitionen', description=None, value='25004'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='25005'), Code(name='Übersicht Schaltzeitdefinitionen', description=None, value='25006'), Code(name='Übersicht Leistungskurvendefinitionen', description=None, value='25007'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='25008'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='25009')])])])]), SegmentGroup(id='6', name='Referenz auf Reklamation', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz auf Reklamation', description='In diesem Segment wird die Dokumentenummer des Geschäftsvorfalls der Reklamation angegeben.', counter='0350', level=2, number='00020', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+AGI:FGEFW566TTDF123E'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Beantragungsnummer', description=None, value='AGI')]), DataElement(id='D_1154', name='Referenz, Identifikation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='6', name='Referenz-Vorgangsnummer (aus Berechnungsformel)', counter='0340', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='RFF', name='Referenz Vorgangsnummer (aus Berechnungsformel)', description='Dieses Segment dient zur Angabe der Referenz auf die Vorgangsnummer eines vorangegangenen Vorgangs. \r\n\r\nHinweis:\r\nDE1154: Referenznummer aus dem IDE-Segment eines Vorgangs zur Übermittlung einer Berechnungsformel', counter='0350', level=2, number='00021', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="RFF+TN:NNV12345'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Transaktions-Referenznummer', description=None, value='TN')]), DataElement(id='D_1154', name='Vorgangsnummer', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..35', codes=[])])])]), SegmentGroup(id='7', name='Lieferrichtung', counter='0370', level=2, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Lieferrichtung', description='Dieses Segment wird benutzt, um die Lieferrichtung der Marktlokation anzugeben.', counter='0380', level=2, number='00022', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z30++Z06'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Lieferrichtung', description=None, value='Z30')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Erzeugung', description=None, value='Z06'), Code(name='Verbrauch', description=None, value='Z07')])])])]), SegmentGroup(id='8', name='Energiemenge der Markt- bzw. Netzlokation', counter='0400', level=2, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Energiemenge der Markt- bzw. Netzlokation', description=None, counter='0410', level=2, number='00023', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z36'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Energiemenge der Markt- bzw. Netzlokation', description=None, value='Z36')])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird der Rechenschrittidentifikator angegeben, welcher in einer Berechnungsformel den letzten Rechenschritt definiert und somit das Ergebnis der Energiemenge der Markt- bzw. Netzlokation ergibt.', counter='0430', level=3, number='00024', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z23:3'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])])]), SegmentGroup(id='8', name='Bestandteil des Rechenschritts', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Bestandteil des Rechenschritts', description='In dieser Segmentgruppe wird ein Bestandteil des in DE1050 genannten Reschenschritts definiert. Alle Bestandteile, die zu einem Rechenschritt gehören, müssen den gleichen Rechenschrittidentifikator haben. \r\n\r\nHinweise zum Rechenschrittidentifikator:\r\n - Der Rechenschrittidentifkator ist ausschließlich als positive natürliche Zahl anzugeben. \r\n - Der Rechenschrittidentifikator ist pro Rechenschritt eindeutig. \r\n - Der Rechenschrittidentifikator identifiziert einen Rechenschritt im Vorgang, dementsprechend können mehrere SEQ+Z37 in einem Vorgang den identischen Rechenschrittidentifikator haben.', counter='0410', level=2, number='00025', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z37+1'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestandteil des Rechenschritts', description=None, value='Z37')]), DataElementGroup(id='C_C286', name='Information über eine Folge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_1050', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..10', format_specification='n..5', codes=[])])]), Segment(id='RFF', name='Referenz auf die ID einer Messlokation', description='In diesem Segment wird die ID einer Messlokation übermittelt.', counter='0430', level=3, number='00026', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z19:DE00014545768S0000000000000003054'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Messlokation', description=None, value='Z19')]), DataElement(id='D_1154', name='ID einer Messlokation', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..70', codes=[])])]), Segment(id='RFF', name='Referenz auf einen Rechenschritt', description='In diesem Segment wird die Referenz auf einen anderen Rechenschritt durch die Angabe des Rechenschrittidentifikators übermittelt. \r\n\r\nHinweis zum Rechenschrittidentifikator:\r\nDer hier angegebene Rechenschrittidentifikator muss ein anderer sein als der im SEQ+Z37 DE1050 genannte, der die SG8 eröffnet, in der dieses RFF Referenz auf einen Rechenschritt enthalten ist.', counter='0430', level=3, number='00027', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z23:1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Rechenschritt', description=None, value='Z23')]), DataElement(id='D_1154', name='Rechenschrittidentifikator', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='n..5', codes=[])])]), SegmentGroup(id='9', name='Mathematischer Operator', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Mathematischer Operator', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.', counter='0480', level=3, number='00028', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z86'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Mathematischer Operator', description=None, value='Z86')])])]), Segment(id='CAV', name='Operator / Operation', description='Dieses Segment dient zur Angabe des anzuwendenden mathematischen Operators oder der mathematischen Operation.\r\n\r\nMathematische Beschreibung des Operators Positivwert:\r\nMit Positivwert (x) ist eine reellwertige Funktion gemeint, für die gilt:\r\nPositivwert (x) = x, wenn x ≥ 0 \r\n                         = 0, sonst.\r\n\r\nAuf die Messwerte der Messlokation sind erst der Verlustfaktor des Transformators und der Verlustfaktor der Leitung, jeweils multiplikativ anzuwenden. Das Ergebnis wird anschließend in der Operation des Bestandteils des Rechenschritts verwendet. \r\n\r\nRegeln:\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z69 (Addition) und CAV+Z70 (Subtraktion) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z82 (Faktor) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z80 (Divisor) vorkommt, darf dieses CAV-Segment genau einmal vorkommen und es muss in diesem Rechenschritt auch CAV+Z81 (Dividend) genau einmal vorkommen. Auch CAV+Z81 (Dividend) darf in einem Rechenschritt nur einmal vorkommen und erfordert zwingend genau ein CAV+Z80 (Divisor) im gleichen Rechenschritt.\r\nWeitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.\r\n\r\nIn einem Rechenschritt dürfen beliebig viele CAV+Z82 (Faktor) vorkommen, es darf aber in diesem Rechenschritt kein CAV+Z69 (Addition) und kein CAV+Z70 (Subtraktion) und kein CAV+Z80 (Divisor) und kein CAV+Z81 (Dividend) und kein CAV+Z83 (Positivwert) vorkommen.\r\n\r\nIn einem Rechenschritt, in dem CAV+Z83 (Positivwert) vorkommt, darf dieses CAV-Segment genau einmal vorkommen. Weitere CAV-Segmente der SG9 Mathematischer Operator sind in diesem Rechenschritt nicht erlaubt.', counter='0490', level=4, number='00029', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z69'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Addition', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Addition berücksichtigt.\r\n', value='Z69'), Code(name='Subtraktion', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts wird in diesem Rechenschritt mittels Subtraktion berücksichtigt.', value='Z70'), Code(name='Divisor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Divisor (Nenner des Bruchs).', value='Z80'), Code(name='Dividend', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des referenzierten Rechenschritts ist in diesem Rechenschritt der Dividend (Zähler des Bruchs).', value='Z81'), Code(name='Faktor', description='Die gemessene Energiemenge der referenzierten Messlokation oder das Ergebnis des Rechenschritts wird in diesem Rechenschritt als ein Faktor einer Multiplikation berücksichtigt.', value='Z82'), Code(name='Positivwert', description='Auf das Ergebnis des referenzierten Rechenschritts ist die Funktion Positivwert anzuwenden (d. h. ist das Ergebnis des referenzierten Rechenschritts ein negativer Wert, so ergibt sich durch das Anwenden der Funktion Positivwert der Wert 0', value='Z83')])])])]), SegmentGroup(id='9', name='Energieflussrichtung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der verwendeten Energieflussrichtung der in dem Bestandteil des Rechenschritts genannten Messlokation.', counter='0480', level=3, number='00030', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z87'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Energieflussrichtung', description=None, value='Z87')])])]), Segment(id='CAV', name='Energieflussrichtung', description='Dieses Segment dient zur Angabe der benutzten Energieflussrichtung im Bestandteil des Rechenschritts. Die Energieflussrichtung gibt an, ob die gemessene Energie an der Messlokation zum Netz fließt (Erzeugung) oder vom Netz wegfließt (Verbrauch). Entsprechend dieser Aussage sind die zuvor durch die UTILMD ausgetauschten Register der Messlokation in der Berechnungsformel zu verwenden.', counter='0490', level=4, number='00031', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z71'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verbrauch', description=None, value='Z71'), Code(name='Erzeugung', description=None, value='Z72')])])])]), SegmentGroup(id='9', name='Verlustfaktor Trafo', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Trafo', description='Diese Segmentgruppe von CCI CAV dient zur Darstellung von Verlustfaktoren an der Messlokation. \r\n\r\nBei einer Messlokation, die aufgrund der vertraglichen Regelungen die Energiemenge auf der Oberspannungsseite des Transformators zu erfassen hat, jedoch die Energiemenge auf der Unterspannungsseite des Transformators erfasst, ist die Angabe des Verlustfaktors des Transformators nötig. Dies ist der Fall, wenn die Spannungsebene der Marktlokation höher ist als die der Messlokation.\r\n\r\nHinweis: \r\n„Verlustfaktor Trafo“ entspricht im NN-Vertrag dem Korrekturfaktor.', counter='0480', level=3, number='00032', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++Z16'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Trafo', description=None, value='Z16')])])]), Segment(id='CAV', name='Verlustfaktor Trafo', description='Dieses Segment dient zur Angabe des Verlustfaktors des Transformators. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor Trafo vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben.\r\nDer Verlustfaktor Trafo ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00033', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Trafo', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Verlustfaktor Leitung', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nBei einer räumlichen Entfernung des Anschlusspunktes der Marktlokation und der für die Ermittlung der Energiemenge zuständigen Messlokation, kommt es zu nicht gemessenen Energiemengen, die aufgrund des Anschlusspunktes der Marktlokation und der Messlokation entstanden sind. Diese in den Leitungen/Kabeln verursachten Verluste werden mit dem Verlustfaktor Leitung berücksichtigt.', counter='0480', level=3, number='00034', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZB2'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Verlustfaktor Leitung', description=None, value='ZB2')])])]), Segment(id='CAV', name='Verlustfaktor Leitung', description='Dieses Segment dient zur Angabe des Verlustfaktors der Leitung. \r\n\r\nAbhängig von der Anschlusssituation, der Energieflussrichtung und Lage der Messung ist der Verlustfaktor der Leitung vom Sender als „Zu- oder Abschlag“ (größer oder kleiner 1) anzugeben. \r\nDer Verlustfaktors der Leitung ist immer multiplikativ anzuwenden.', counter='0490', level=4, number='00035', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+Z28:::1.04'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Verlustfaktor', description=None, value='Z28')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Verlustfaktor Leitung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])]), SegmentGroup(id='9', name='Aufteilungsfaktor Energiemenge', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktors der Energiemenge.\r\n\r\nIm Referentenentwurf zum Gesetz zur Änderung des Erneuerbare-Energien-Gesetzes und weiterer energiewirtschaftsrechtlicher Vorschriften zur Steigerung des Ausbaus photovoltaischer Energieerzeugung ist im § 42b EnWG die gemeinschaftliche Gebäudeversorgung mittels einer PV-Anlage geregelt:\r\n„Ein Letztverbraucher kann elektrische Energie, die durch den Einsatz einer Gebäudestromanlage erzeugt wurde, die in, an oder auf demselben Gebäude installiert ist, in dem der Letztverbraucher Mieter von Räumen, Wohnungseigentümer im Sinne des § 1 Absatz 1 des Wohnungseigentumsgesetzes oder sonst Eigentümer von Räumen ist, nutzen, wenn \r\n1. die Nutzung ohne Durchleitung durch ein Netz erfolgt,\r\n2. die Strombezugsmengen des Letztverbrauchers viertelstündlich gemessen werden und \r\n3. der Letztverbraucher einen Gebäudestromnutzungsvertrag nach Maßgabe der folgenden Absätze mit dem Betreiber der Gebäudestromanlage geschlossen hat (teilnehmender Letztverbraucher)."\r\n\r\nMit dem Aufteilungsfaktor Energiemenge kann die durch das Gesetz benötigte Verteilung der durch eine erzeugende Marktlokation erzeugte Energiemenge auf verbrauchende Marktlokationen übermittelt werden. Die erzeugte Energiemenge wird durch eine oder mehrere Messlokationen gemessen über diese die Verteilung erfolgt.', counter='0480', level=3, number='00036', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+++ZG6'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..17', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZG6')])])]), Segment(id='CAV', name='Aufteilungsfaktor Energiemenge', description='Dieses Segment dient zur Angabe des Aufteilungsfaktor einer Energiemenge.', counter='0490', level=4, number='00037', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZH6:::0.2'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Aufteilungsfaktor Energiemenge', description=None, value='ZH6')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Aufteilungsfaktor Energiemenge', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='n..35', codes=[])])])])]), SegmentGroup(id='8', name='Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Zählzeitdefinition und einer ausgerollten Zählzeitdefinition definiert.', counter='0410', level=2, number='00038', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z43'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinition', description=None, value='Z42'), Code(name='Ausgerollte Zählzeitdefinition', description=None, value='Z43')])]), Segment(id='DTM', name='Zählzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der Wechsel auf ein neues aktives Zählzeitregister erfolgt.', counter='0420', level=3, number='00039', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z33:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitänderungszeitpunkt', description=None, value='Z33')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), Segment(id='RFF', name='Zählendes Register', description='Angabe des Registers, welches ab dem Zählzeitänderungszeitpunkt aktiv ist.', counter='0430', level=3, number='00040', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="RFF+Z28:RZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des zählenden Registers', description=None, value='Z28')]), DataElement(id='D_1154', name='Code des zählenden Registers', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Zählzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt.', counter='0480', level=3, number='00041', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z39++ZZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z39')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Zählzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00042', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit einem Zählzeitänderungszeitpunkt an allen Tagen je Zählzeitregister über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition einmalig ausgerollt und übermittelt werden.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Zählzeitdefinition mit unterschiedlichen Zählzeitänderungszeitpunkt je Zählzeitregister an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Zählzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Zählzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00043', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Zählzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw.NB übermittelt die ausgerollte Zählzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])]), Segment(id='CAV', name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description='In diesem Segment wird angegeben, ob der Netzbetreiber zur Ermittlung des Leistungsmaximums bei atypsicher Netznutzung das Hochlastzeitfenster nutzt.', counter='0490', level=4, number='00044', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD4:::Z25'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Ermittlung des Leistungsmaximums bei atypischer Netznutzung', description=None, value='ZD4')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Verwendung des Hochlastzeitfensters', description=None, value='Z25'), Code(name='keine Verwendung des Hochlastzeitfensters', description=None, value='Z26')])])]), Segment(id='CAV', name='Bestellbarkeit der Zählzeitdefinition', description='In diesem Segment wird die Bestellbarkeit der Zählzeitdefinition übermittelt.', counter='0490', level=4, number='00045', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD7:::Z27'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Bestellbarkeit der Zählzeitdefinition', description=None, value='ZD7')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Zählzeitdefinition ist bestellbar', description=None, value='Z27'), Code(name='Zählzeitdefinition ist nicht bestellbar', description=None, value='Z28')])])]), Segment(id='CAV', name='Zählzeitdefinitionstyp', description='In diesem Segment wird der Zählzeitdefinitionstyp übermittelt.', counter='0490', level=4, number='00046', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="CAV+ZD3:::Z32:Beschreibungstext'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Zählzeitdefinitionstyp', description=None, value='ZD3')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='Wärmepumpe', description=None, value='Z29'), Code(name='Nachtspeicherheizung', description=None, value='Z30'), Code(name='Schwachlastzeitfenster', description=None, value='Z31'), Code(name='sonstiger Zählzeitdefinitionstyp', description=None, value='Z32'), Code(name='Hochlastzeitfenster', description=None, value='Z35')]), DataElement(id='D_7110', name='Beschreibung Zählzeitdefinitionstyp', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, format_std='an..35', format_specification='an..35', codes=[])])])])]), SegmentGroup(id='8', name='Register der Zählzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Register der Zählzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Register einer Zählzeitdefinition übermittelt.', counter='0410', level=2, number='00047', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z41'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Register der Zählzeitdefinition', description=None, value='Z41')])]), Segment(id='RFF', name='Referenz auf eine Zählzeitdefinition', description='In diesem Segment wird der Code der Zählzeitdefinition übermittelt um das Register einer Zählzeitdefinition zuzuordnen.', counter='0430', level=3, number='00048', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="RFF+Z27:ZZ1'", data_elements=[DataElementGroup(id='C_C506', name='Referenz', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_1153', name='Referenz, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Zählzeitdefinition', description=None, value='Z27')]), DataElement(id='D_1154', name='Code der Zählzeitdefinition', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..70', format_specification='an..3', codes=[])])]), SegmentGroup(id='9', name='Register', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, elements=[Segment(id='CCI', name='Code des Zählzeitregister', description='In diesem Segment wird der Code des Zählzeitregisters übermittelt.', counter='0480', level=3, number='00049', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z38++RZ1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code des Zählzeitregisters', description=None, value='Z38')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code des Zählzeitregisters', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])])]), SegmentGroup(id='9', name='Schwachlastfähigkeit', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schwachlastfähigkeit', description='Dieses Segment dient zur Identifizierung und Beschreibung der Schwachlastfähigkeit eines Registers.\r\nHier wird übermittelt ob eine Schwachlast-Fähigkeit für die Konzessionsabgabe benötigt wird.', counter='0480', level=3, number='00050', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z10++Z59'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Schwachlastfähigkeit', description=None, value='Z10')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='Nicht-Schwachlast fähig', description=None, value='Z59'), Code(name='Schwachlast fähig', description=None, value='Z60')])])])])]), SegmentGroup(id='8', name='Schaltzeitdefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Schaltzeitdefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Schaltdefinition und einer ausgerollten Schaltzeitdefinitionen definiert.', counter='0410', level=2, number='00051', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z69'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitdefinition', description=None, value='Z69'), Code(name='Ausgerollte Schaltzeitdefinition', description=None, value='Z73')])]), Segment(id='DTM', name='Schaltzeitänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem eine Schalthandlung stattfindet.', counter='0420', level=3, number='00052', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z44:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schaltzeitänderungszeitpunkt', description=None, value='Z44')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Schaltzeitdefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Schaltzeitdefinition', description='In diesem Segment wird der Code der Schaltzeitdefinition übermittelt.', counter='0480', level=3, number='00053', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z52++EDF'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Schaltzeitdefinition', description=None, value='Z52')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Schaltzeitdefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Schaltzeitdefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00054', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit identischen Schaltzeitänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinitiont wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Schaltzeitdefinition mit unterschiedlichen Schaltzeitänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Schaltzeitdefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Schaltzeitdefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Schaltzeitdefinition übermittelt.', counter='0490', level=4, number='00055', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Schaltzeitdefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='9', name='Schalthandlung an der Lokation', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Schalthandlung an der Lokation', description='Angabe der Schalthandlung zu einem Schaltzeitänderungszeitpunkt.', counter='0480', level=3, number='00056', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z58++ZF4'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Schalthandlung', description=None, value='Z58')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Merkmal, Code', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistung an der Lokation an', description=None, value='ZF4'), Code(name='Leistung an der Lokation aus', description=None, value='ZF5')])])])])]), SegmentGroup(id='8', name='Leistungskurvendefinition', counter='0400', level=2, max_rep_std=99999, max_rep_specification=99999, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='EQ', name='Leistungskurvendefinition', description='In dieser Segmentgruppe werden die Eigenschaften der Leistungskurvendefinition und einer ausgerollten Leistungskurvendefinition definiert.', counter='0410', level=2, number='00057', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="SEQ+Z70'", data_elements=[DataElement(id='D_1229', name='Handlung, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvendefinition', description=None, value='Z70'), Code(name='Ausgerollte Leistungskurvendefinition', description=None, value='Z74')])]), Segment(id='DTM', name='Leistungskurvenänderungszeitpunkt', description='Angabe eines Zeitpunktes, zu dem der obere und/oder der untere Schwellwert einer Leistungskurve geändert wird.', counter='0420', level=3, number='00058', max_rep_std=9, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, example="DTM+Z45:202110070605?+00:303'", data_elements=[DataElementGroup(id='C_C507', name='Datum/Uhrzeit/Zeitspanne', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_2005', name='Datums- oder Uhrzeit- oder Zeitspannen-Funktion, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='Leistungskurvenänderungszeitpunkt', description=None, value='Z45')]), DataElement(id='D_2380', name='Datum oder Uhrzeit oder Zeitspanne, Wert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..35', codes=[]), DataElement(id='D_2379', name='Datums- oder Uhrzeit- oder Zeitspannen-Format, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='CCYYMMDDHHMMZZZ', description=None, value='303'), Code(name='HHMM', description=None, value='401')])])]), SegmentGroup(id='9', name='Leistungskurvendefinition', counter='0470', level=3, max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='CCI', name='Code der Leistungskurvendefinition', description='In diesem Segment wird der Code der Leistungskurvendefinition übermittelt.', counter='0480', level=3, number='00059', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="CCI+Z53++ES1'", data_elements=[DataElement(id='D_7059', name='Klassentyp, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Code der Leistungskurvendefinition', description=None, value='Z53')]), DataElementGroup(id='C_C502', name='Einzelheiten zu Maßangaben', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, data_elements=[DataElement(id='D_6313', name='Gemessene Dimension, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[])]), DataElementGroup(id='C_C240', name='Merkmalsbeschreibung', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, data_elements=[DataElement(id='D_7037', name='Code der Leistungskurvendefinition', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..17', format_specification='an..3', codes=[])])]), Segment(id='CAV', name='Häufigkeit der Übermittlung', description='In diesem Segment wird angegeben, ob die Leistungskurvendefinition jährlich oder nur einmalig zu übermitteln ist.', counter='0490', level=4, number='00060', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZE0:::Z33'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Häufigkeit der Übermittlung', description=None, value='ZE0')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='einmalig zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit identischen Leistungskurvenänderungszeitpunkten an allen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition wird einmalig ausgerollt und übermittelt.', value='Z33'), Code(name='jährlich zu übermittelnde ausgerollte Definition', description='Es handelt sich um eine Leistungskurvendefinition mit unterschiedlichen Leistungskurvenänderungszeitpunkten an den einzelnen Tagen über den gesamten Gültigkeitszeitraum. Diese Leistungskurvendefinition muss jedes Jahr ausgerollt und übermittelt werden.', value='Z34')])])]), Segment(id='CAV', name='Übermittelbarkeit der ausgerollten Leistungskurvendefinition', description='In diesem Segment wird der Status der Übermittelbarkeit der ausgerollten Leistungskurvendefinition übermittelt.', counter='0490', level=4, number='00061', max_rep_std=99, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, example="CAV+ZD5:::Z23'", data_elements=[DataElementGroup(id='C_C889', name='Merkmalswert', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_7111', name='Merkmalswert, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..3', format_specification='an..3', codes=[Code(name='Übermittelbarkeit der ausgerollten Definition', description=None, value='ZD5')]), DataElement(id='D_1131', name='Codeliste, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..17', format_specification='an..17', codes=[]), DataElement(id='D_3055', name='Verantwortliche Stelle für die Codepflege, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.N: 'N'>, format_std='an..3', format_specification='an..3', codes=[]), DataElement(id='D_7110', name='Merkmalswert', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..35', format_specification='an..3', codes=[Code(name='elektronisch übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition per EDIFACT mit dem Nachrichtenformat UTILTS.', value='Z23'), Code(name='elektronisch nicht übermittelbar', description='Der LF bzw. NB übermittelt die ausgerollte Leistungskurvendefinition auf einem bilateral vereinbarten Weg. Dieser Weg wird hier nicht weiter beschrieben.', value='Z24')])])])]), SegmentGroup(id='11', name='oberer Schwellwert', counter='0530', level=3, max_rep_std=99999, max_rep_specification=1, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.D: 'D'>, elements=[Segment(id='QTY', name='oberer Schwellwert', description='In diesem Segment wird der oberer Schwellwert der Leistungskurvendefinition angegeben.', counter='0540', level=3, number='00062', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="QTY+Z40:70.00:P1'", data_elements=[DataElementGroup(id='C_C186', name='Mengenangaben', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, data_elements=[DataElement(id='D_6063', name='Menge, Qualifier', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..3', format_specification='an..3', codes=[Code(name='', description=None, value=None), Code(name='oberer Schwellwert', description=None, value='Z40')]), DataElement(id='D_6060', name='Mengenangabe in %', description=None, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..35', format_specification='n..6', codes=[]), DataElement(id='D_6411', name='Maßeinheit, Code', description=None, status_std=<MigStatus.C: 'C'>, status_specification=<MigStatus.R: 'R'>, format_std='an..8', format_specification='an..2', codes=[Code(name='', description=None, value=None), Code(name='Prozent', description=None, value='P1')])])])])])])]), Segment(id='UNT', name='Nachrichten-Endesegment', description='Das UNT-Segment ist ein Muss-Segment in UN/EDIFACT. Es muss immer das letzte Segment in einer Nachricht sein.', counter='0640', level=0, number='00063', max_rep_std=1, max_rep_specification=1, status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, example="UNT+63+1'", data_elements=[DataElement(id='D_0074', name='Anzahl der Segmente in einer Nachricht', description='Hier wird die Gesamtzahl der Segmente einer Nachricht angegeben.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='n..6', format_specification='n..6', codes=[]), DataElement(id='D_0062', name='Nachrichten-Referenznummer', description='Die Referenznummer aus dem UNH-Segment muss hier wiederholt werden.', status_std=<MigStatus.M: 'M'>, status_specification=<MigStatus.M: 'M'>, format_std='an..14', format_specification='an..14', codes=[])])])
# ---
